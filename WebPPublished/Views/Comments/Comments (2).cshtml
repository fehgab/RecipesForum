@using PagedList.Mvc
@using Microsoft.AspNet.Identity
@model WebPPublished.Models.CategoriesListData
@{ ViewBag.Title = "Kommentek - " + Model.SelectedRecipe.Title;
    var i = 0;
}
<div class="row">
    <div class="col-md-10">
        <h1>@Model.SelectedRecipe.Title</h1>
    </div>
    @if (Request.IsAuthenticated)
    {
        if (Model.SelectedRecipe.User.UserName == HttpContext.Current.User.Identity.Name || HttpContext.Current.User.IsInRole("Administrators"))
        {
            <div class="col-md-2 text-right">
                <a href="javascript:location.href='@Url.Action("Edit", "Recipes", new { @recipeId = Model.SelectedRecipe.ID})';">Recept szerkesztése</a>
            </div>
        }

    }
</div>
<div class="row">
    <div class="col-md-4">
        <img src="/Upload/Images/@Model.SelectedRecipe.PictureUrl" class="img-responsive" />
    </div>
    <div class="col-md-8">
        <div>
            <h4>Elkészítési idő: @Model.SelectedRecipe.PrepareTime</h4>
        </div>
        <div>
            <h4>Hozzávalók</h4>
            <p>@Html.Raw(@Model.SelectedRecipe.Ingredients)</p>
        </div>
        <div style="padding-top: 15px">
            <h4>Elkészítés</h4>
            <p>@Html.Raw(@Model.SelectedRecipe.HowToPrepare)</p>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12 text-right">
        <a href="javascript:location.href='@Url.Action("Create", "Comments", new { @recipeId = Model.SelectedRecipe.ID})';">Új hozzászólás</a>
    </div>
</div>
@if (Request.IsAuthenticated)
{
    <h3>@ViewBag.Title</h3>

    <div id="create-post">
        @using (Ajax.BeginForm("Create", "Comments",
            new AjaxOptions
            {
                UpdateTargetId = "create-post",
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "POST",
                OnSuccess = String.Format("(fuction() {{ RecipeForum.GetComments( '{0}', '{1}' ); }})()", Url.Action("Comments", "Comments"), Model.SelectedRecipe.ID)
            },
            new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.SelectedRecipe.ID)
            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.CommentsDB.Text, new { @class = "form-control", @id = "newcomment", @name = "newcomment" })
                        @Html.ValidationMessageFor(model => model.CommentsDB.Text, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        <input type="submit" value="Mentés" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div>
        @Html.ActionLink("Bejelentkezés", "Login", "Account")
    </div>
}

<div class="row">
    <div class="col-md-12">
        <ul class="comments-list">
            @foreach (var item in @Model.Comments)
            {
                <li>
                    <div class="comment rounded">
                        <div class="row">

                            @if (Request.IsAuthenticated)
                            {
                                if (@item.User.UserName == HttpContext.Current.User.Identity.Name || HttpContext.Current.User.IsInRole("Administrators"))
                                {
                                    <div class="col-md-12 text-right">
                                        @using (Html.BeginForm(Html.BeginForm("Comments", "Comments", null, FormMethod.Post, new { @class = "same-line" })))
                                        {
                                            @Html.HiddenFor(model => model.SelectedRecipe.ID)
                                            @Html.HiddenFor(model => model.CommentsDB.Id, new { @Value = @item.ID })
                                            <label>
                                                <button type="submit" name="X-HTTP-Method-Override" value="DELETE" onclick="return confirm('Are you sure?')">
                                                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                                </button>
                                            </label>
                                        }
                                        <label>
                                            <button type="submit" onclick="window.location.href='@Url.Action("Edit", "Comments", new { commentId = @item.ID })'">
                                                <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                            </button>
                                        </label>
                                    </div>
                                }

                            }
                            <div class="col-md-6"><span class="comment-username">@item.User.UserName</span></div>
                            <div class="col-md-6 text-right"><span class="comment-datetime">@item.CreateDate</span></div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 layout-padding"><div class="comment-text rounded">@Html.Raw(@item.Text)</div></div>
                        </div>
                    </div>
                </li>
               }
        </ul>
    </div>
</div>
@if(@Model.Comments.PageCount > 1)
{
    @Html.PagedListPager(Model.Comments, page => Url.Action("Comments", new { recipeId = Model.SelectedRecipe.ID, pageNumber = page }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
}
@*<div>
    @Html.ActionLink("Vissza", null, null, null, new { href = Request.UrlReferrer })
</div>*@